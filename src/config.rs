use std::collections::HashMap;
use std::sync::LazyLock;

use icondata::Icon;
use serde::{Deserialize, Deserializer, Serialize};

// This is generated by build.rs
// Used to add ICON_MAP to the config.rs file
include!(concat!(env!("OUT_DIR"), "/codegen.rs"));

const CONFIG_STR: &str = include_str!("../config.toml");

/// Global configuration instance loaded from config.toml
pub static CONFIG: LazyLock<Config> = LazyLock::new(|| toml::from_str(CONFIG_STR).unwrap());

/// Main configuration structure for WCLI
#[derive(Default, Debug, Clone, Deserialize)]
pub struct Config {
    /// Title of the website/application
    pub title: String,
    /// Full name of the person
    pub name: String,
    /// Email address
    pub email: String,
    /// Terminal prompt configuration
    pub prompt: Prompt,
    /// Technology stack organized by categories (e.g., frontend, backend, devops)
    pub stack: HashMap<String, Vec<StackItem>>,
    /// GitHub profile configuration
    pub github: Github,
    /// Optional LinkedIn profile configuration
    pub linkedin: Option<Linkedin>,
    /// Optional YouTube channel configuration
    pub youtube: Option<Youtube>,
}

/// Represents a technology stack item with display information
#[derive(Debug, Clone, Deserialize)]
pub struct StackItem {
    /// Display name of the technology
    pub name: String,
    /// Icon to display for the technology (deserialized from string)
    #[serde(deserialize_with = "deserialize_icon")]
    pub icon: Icon,
    /// Optional custom color for the technology badge
    pub color: Option<String>,
}

/// Custom deserializer for converting string icon names to Icon types
/// Uses the ICON_MAP generated by build.rs to resolve icon names
fn deserialize_icon<'de, D>(deserializer: D) -> Result<Icon, D::Error>
where
    D: Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    let icon = ICON_MAP.get(&s).unwrap();
    Ok(icon)
}

/// Terminal prompt display configuration
#[derive(Default, Debug, Clone, Deserialize)]
pub struct Prompt {
    /// Hostname to display in the terminal prompt
    pub hostname: String,
    /// Username to display in the terminal prompt
    pub username: String,
}

/// GitHub profile configuration and repository settings
#[derive(Default, Debug, Clone, Deserialize)]
pub struct Github {
    /// GitHub username for profile information in `fetch` command
    /// and API calls in `projects` command
    pub username: String,
    /// List of specific repositories to display (empty = show all from API)
    #[serde(default)]
    pub repos: Vec<String>,
    /// List of in-progress projects not yet published to GitHub
    #[serde(default)]
    pub in_progress: Vec<InProgress>,
}

impl Github {
    /// Returns the full GitHub profile URL
    pub fn url(&self) -> String {
        format!("https://github.com/{}", self.username)
    }

    /// Returns the short GitHub profile URL (without https://)
    pub fn short_url(&self) -> String {
        format!("github.com/{}", self.username)
    }

    /// Returns the GitHub API URL for fetching user repositories
    pub fn api_url(&self) -> String {
        format!("https://api.github.com/users/{}/repos", self.username)
    }
}

/// Represents an in-progress project not yet published to GitHub
#[derive(Default, Debug, Clone, Serialize, Deserialize)]
pub struct InProgress {
    /// Name of the in-progress project
    pub name: String,
    /// Optional description of what the project does
    pub description: Option<String>,
    /// Optional primary programming language used in the project
    pub language: Option<String>,
}

/// LinkedIn profile configuration
#[derive(Default, Debug, Clone, Deserialize)]
pub struct Linkedin {
    /// LinkedIn username for profile URL generation
    pub username: String,
}

impl Linkedin {
    /// Returns the full LinkedIn profile URL
    pub fn url(&self) -> String {
        format!("https://linkedin.com/in/{}", self.username)
    }

    /// Returns the short LinkedIn profile URL (without https://)
    pub fn short_url(&self) -> String {
        format!("linkedin.com/in/{}", self.username)
    }
}

/// YouTube channel configuration
#[derive(Default, Debug, Clone, Deserialize)]
pub struct Youtube {
    /// YouTube channel ID for URL generation
    pub channel_id: String,
}

impl Youtube {
    /// Returns the full YouTube channel URL
    pub fn url(&self) -> String {
        format!("https://www.youtube.com/{}", self.channel_id)
    }

    /// Returns the short YouTube channel URL (without https://)
    pub fn short_url(&self) -> String {
        format!("youtube.com/{}", self.channel_id)
    }
}
